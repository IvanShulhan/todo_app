{"version":3,"sources":["api/api.js","components/TodoItem.jsx","components/TodoList.jsx","components/TodosFilter.jsx","components/TodoApp.jsx","components/Info.jsx","App.jsx","index.js"],"names":["request","url","option","fetch","then","res","ok","Error","json","post","data","method","headers","body","JSON","stringify","changeTodo","todoId","value","deleteTodo","TodoItem","React","memo","item","useContext","TodoContent","setTodos","setToggleAll","useState","isEditing","setIsEditing","newTitle","setNewTitle","changeTodoTitle","id","curr","map","todo","title","className","classNames","completed","editing","onDoubleClick","type","checked","onChange","htmlFor","onClick","filter","autoFocus","event","target","onBlur","onKeyDown","code","TodoList","items","Fragment","TodosFilter","sortParam","setSortParam","href","selected","createContext","TodoApp","todos","todoTitle","setTodoTitle","toggleAll","isPressSubmit","setIsPressSubmit","filterParam","setFilterParam","useEffect","getTodos","todosLeft","useMemo","count","reduce","acc","length","setToggleAllTodos","contextValue","changeIsPressSubmit","filteredTodos","onSubmit","userId","preventDefault","placeholder","disabled","Provider","Info","name","App","user","setUser","username","email","phone","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6477296.chunk.js","sourcesContent":["// eslint-disable-next-line no-unused-vars\nconst BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url, option) => fetch(`${BASE_URL}${url}`, option)\n  .then((res) => {\n    if (!res.ok) {\n      throw new Error('Problem with loading data...');\n    }\n\n    return res.json();\n  });\n\nexport const getTodos = id => request(`/todos?userId=${id}`);\n\nconst post = (url, data) => (\n  request(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  })\n);\n\nexport const createUser = (\n  name, username, email, phone,\n) => post('/users', {\n  name,\n  username,\n  email,\n  phone,\n});\n\nexport const createTodo = (title, userId) => post('/todos', {\n  title,\n  userId,\n  completed: false,\n});\n\nconst patch = (url, data) => request(url, {\n  method: 'PATCH',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n\nexport const changeTodo = (todoId, value) => {\n  patch(`/todos/${todoId}`, value);\n};\n\nexport const deleteTodo = todoId => request(\n  `/todos/${todoId}`,\n  { method: 'DELETE' },\n);\n","import React, { useContext, useState } from 'react';\nimport classNames from 'classnames';\nimport { changeTodo, deleteTodo } from '../api/api';\n\n// eslint-disable-next-line import/no-cycle\nimport { TodoContent } from './TodoApp';\n\nexport const TodoItem = React.memo(\n  ({ item }) => {\n    const { setTodos, setToggleAll } = useContext(TodoContent);\n    const [isEditing, setIsEditing] = useState(false);\n    const [newTitle, setNewTitle] = useState('');\n\n    const setTodoStatus = (id) => {\n      setTodos(curr => curr.map((todo) => {\n        if (todo.id === id) {\n          if (todo.completed) {\n            setToggleAll(false);\n          }\n\n          changeTodo(id, { completed: !todo.completed });\n\n          return { ...todo, completed: !todo.completed };\n        }\n\n        return todo;\n      }));\n    };\n\n    const changeTodoTitle = (id) => {\n      setTodos(curr => curr.map((todo) => {\n        if (todo.id === item.id) {\n          changeTodo(id, { title: newTitle });\n\n          return { ...todo, title: newTitle };\n        }\n\n        return todo;\n      }));\n    };\n\n    const removeTodo = (id) => {\n      setTodos(curr => curr.filter((todo) => {\n        if (todo.id === id) {\n          deleteTodo(id);\n        }\n\n        return todo.id !== id;\n      }));\n    };\n\n    return (\n      <li\n        className={classNames({\n          completed: item.completed,\n          editing: isEditing,\n        })}\n        onDoubleClick={() => {\n          setIsEditing(true);\n        }}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id=\"toggle-view\"\n            checked={item.completed}\n            onChange={() => {\n              setTodoStatus(item.id);\n            }}\n          />\n          <label htmlFor=\"toggle-view\">{item.title}</label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => {\n              removeTodo(item.id);\n            }}\n          />\n        </div>\n        {isEditing && (\n        <input\n          type=\"text\"\n          className=\"edit\"\n          value={newTitle}\n          // eslint-disable-next-line jsx-a11y/no-autofocus\n          autoFocus\n          onChange={event => setNewTitle(event.target.value)}\n          onBlur={(event) => {\n            if (newTitle) {\n              changeTodoTitle(item.id);\n              setNewTitle('');\n              setIsEditing(false);\n            } else {\n              setNewTitle('');\n              setIsEditing(false);\n            }\n          }}\n          onKeyDown={(event) => {\n            if (event.code === 'Enter' && newTitle) {\n              changeTodoTitle(item.id);\n              setNewTitle('');\n              setIsEditing(false);\n            }\n\n            if (event.code === 'Escape') {\n              setNewTitle('');\n              setIsEditing(false);\n            }\n          }}\n        />\n        )}\n      </li>\n    );\n  },\n);\n","import React from 'react';\n// eslint-disable-next-line import/no-cycle\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({ items }) => (\n  <ul className=\"todo-list\">\n    {items.map(item => (\n      <React.Fragment key={item.id}>\n        <TodoItem item={item} />\n      </React.Fragment>\n    ))}\n  </ul>\n);\n","import React from 'react';\nimport classNames from 'classnames';\n\nexport const TodosFilter = ({ sortParam, setSortParam }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classNames({ selected: sortParam === 'all' })}\n        onClick={() => setSortParam('all')}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={classNames({ selected: sortParam === 'active' })}\n        onClick={() => setSortParam('active')}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classNames({ selected: sortParam === 'completed' })}\n        onClick={() => setSortParam('completed')}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n","import React, { useEffect, useMemo, useState } from 'react';\n// eslint-disable-next-line import/no-cycle\nimport { TodoList } from './TodoList';\nimport { getTodos, createTodo, changeTodo, deleteTodo } from '../api/api';\nimport { TodosFilter } from './TodosFilter';\n\nexport const TodoContent = React.createContext([]);\n\nexport const TodoApp = React.memo(\n  ({ id }) => {\n    const [todos, setTodos] = useState([]);\n    const [todoTitle, setTodoTitle] = useState('');\n    const [toggleAll, setToggleAll] = useState(false);\n    const [isPressSubmit, setIsPressSubmit] = useState(false);\n    const [filterParam, setFilterParam] = useState('all');\n\n    useEffect(() => {\n      if (id) {\n        getTodos(id)\n          .then(setTodos);\n      }\n    }, [id, isPressSubmit]);\n\n    const setToggleAllTodos = (count) => {\n      if (count === todos.length && todos.length > 0) {\n        setToggleAll(true);\n      }\n\n      if (count === 0) {\n        setToggleAll(false);\n      }\n    };\n\n    const todosLeft = useMemo(() => {\n      const count = (\n        todos.reduce((acc, todo) => (todo.completed ? acc + 1 : acc), 0)\n      );\n\n      setToggleAllTodos(count);\n\n      return count;\n    }, [todos]);\n\n    const toggleAllTodos = () => {\n      if (toggleAll) {\n        setTodos(curr => curr.map((todo) => {\n          if (todo.completed) {\n            changeTodo(todo.id, { completed: false });\n\n            return { ...todo, completed: false };\n          }\n\n          setToggleAll(false);\n\n          return todo;\n        }));\n      } else {\n        setTodos(curr => curr.map((todo) => {\n          if (!todo.completed) {\n            changeTodo(todo.id, { completed: true });\n\n            return { ...todo, completed: true };\n          }\n\n          setToggleAll(true);\n\n          return todo;\n        }));\n      }\n    };\n\n    const deleteCompleted = () => {\n      setTodos(curr => curr.filter((todo) => {\n        if (todo.completed) {\n          deleteTodo(todo.id);\n        }\n\n        return !todo.completed;\n      }));\n    };\n\n    const contextValue = { todos, setTodos, setToggleAll };\n\n    const changeIsPressSubmit = () => {\n      setIsPressSubmit(curr => !curr);\n    };\n\n    const filteredTodos = useMemo(() => {\n      switch (filterParam) {\n        case 'active':\n          return todos.filter(todo => !todo.completed);\n        case 'completed':\n          return todos.filter(todo => todo.completed);\n        default:\n          return todos;\n      }\n    }, [filterParam, todos]);\n\n    return (\n      <>\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={(event) => {\n            event.preventDefault();\n\n            if (todoTitle) {\n              setTodoTitle('');\n              createTodo(todoTitle, id)\n                .then(changeIsPressSubmit);\n            }\n          }}\n          >\n            <input\n              type=\"text\"\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={todoTitle}\n              onChange={({ target }) => {\n                setTodoTitle(target.value);\n              }}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            disabled={todos.length === 0}\n            checked={toggleAll}\n            onChange={toggleAllTodos}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoContent.Provider value={contextValue}>\n            <TodoList items={filteredTodos} />\n          </TodoContent.Provider>\n\n        </section>\n\n        {todos.length > 0 && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {todosLeft > 0 && `${todosLeft} ${todosLeft > 1 ? 'items' : 'item'} left`}\n            </span>\n\n            <TodosFilter\n              sortParam={filterParam}\n              setSortParam={setFilterParam}\n            />\n\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={deleteCompleted}\n            >\n              {todosLeft > 0 && 'Clear completed'}\n            </button>\n          </footer>\n        )}\n\n      </>\n    );\n  },\n);\n","import React from 'react';\n\nexport const Info = ({ name }) => (\n  <div className=\"info App-info\">\n    <h3 className=\"info-title\">\n      by\n      {' '}\n      {name || '...'}\n    </h3>\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { TodoApp } from './components/TodoApp';\nimport { Info } from './components/Info';\nimport { createUser } from './api/api';\n\nexport const App = () => {\n  const [user, setUser] = useState({});\n\n  useEffect(() => {\n    createUser(\n      'Ivan Shulhan',\n      'IvanShulhan',\n      'vanyashulia.89@gmail.com',\n      '+380639037909',\n    )\n      .then(setUser);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <section className=\"todoapp\">\n        <TodoApp id={user.id} />\n      </section>\n      <Info name={user.name} />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}